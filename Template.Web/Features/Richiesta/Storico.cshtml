<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Richieste Inviate</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <style>
        .table th, .table td {
            vertical-align: middle;
        }
    </style>
</head>
<body>
    <div id="app" class="container mt-5">
        <a href="/" class="text-decoration-none">
            <i class="bi bi-house-door"></i> Torna alla Home
        </a>
        <h1 class="text-left my-4">Richieste Inviate</h1>

        <div v-if="richieste.length" class="table-responsive p-3 bg-body-tertiary rounded">
            <table class="table table-bordered table-striped align-middle">
                <thead class="bg-white text-center">
                    <tr>
                        <th>Utente</th>
                        <th>Tipologia</th>
                        <th>Data Inizio</th>
                        <th>Data Fine</th>
                        <th>Ora Inizio</th>
                        <th>Ora Fine</th>
                        <th>Stato</th>
                        <th v-if="isManager">Azioni</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(richiesta, index) in richieste" :key="richiesta.id" :class="index % 2 === 0 ? 'bg-light' : ''">
                        <td class="text-center fw-bold">{{ richiesta.userName }}</td>
                        <td>{{ richiesta.tipologia }}</td>
                        <td class="text-center">{{ formatDate(richiesta.dataInizio) }}</td>
                        <td class="text-center">{{ formatDate(richiesta.dataFine) }}</td>
                        <td class="text-center">{{ richiesta.oraInizio }}</td>
                        <td class="text-center">{{ richiesta.oraFine }}</td>
                        <td class="text-center">
                            <span class="badge" :class="getBadgeClass(richiesta.stato)">
                                {{ richiesta.stato }}
                            </span>
                        </td>
                        <td v-if="isManager && richiesta.stato === 'Da Approvare'" class="text-center">
                            <button class="btn btn-success btn-sm me-1" v-on:click="gestisciRichiesta(richiesta.id, 'Approva')">
                                Approva
                            </button>
                            <button class="btn btn-danger btn-sm" v-on:click="gestisciRichiesta(richiesta.id, 'Rifiuta')">
                                Rifiuta
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div v-else class="alert alert-warning text-center shadow-sm mt-4" role="alert">
            <strong>Non ci sono richieste salvate.</strong>
        </div>
    </div>
</body>
</html>

<script>
    new Vue({
        el: '#app',
        data: {
            richieste: @Html.Raw(Json.Serialize(Model)),
            isManager: @User.IsInRole("Manager").ToString().ToLower()
        },
        methods: {
            formatDate(date) {
                return new Date(date).toLocaleDateString('it-IT');
            },
            getBadgeClass(stato) {
                switch (stato) {
                    case 'Approvata': return 'bg-success';
                    case 'Rifiutata': return 'bg-danger';
                    default: return 'bg-primary';
                }
            },
            gestisciRichiesta(id, azione) {
                const conferma = confirm(`Sei sicuro di voler ${azione === 'Approva' ? 'approvare' : 'rifiutare'} questa richiesta?`);
                if (!conferma) return;

                // Esegui la richiesta al backend per approvare o rifiutare
                fetch(`/Richiesta/${azione}?id=${id}`, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Dopo l'aggiornamento, recupera i dati aggiornati dal server
                        this.aggiornaRichieste();
                        alert(`Richiesta ${azione === 'Approva' ? 'approvata' : 'rifiutata'} con successo.`);
                    } else {
                        alert('Errore durante l\'operazione: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Errore durante l\'operazione:', error);
                    alert('Errore durante l\'operazione. Per favore, riprova.');
                });
            },

            aggiornaRichieste() {
                // Recupera le richieste aggiornate dal server
                fetch('/Richiesta/Lista') // Assicurati che questa endpoint restituisca le richieste aggiornate
                    .then(response => response.json())
                    .then(data => {
                        this.richieste = data;
                    })
                    .catch(error => {
                        console.error('Errore durante il recupero delle richieste:', error);
                    });
            }


        }
    });
</script>


