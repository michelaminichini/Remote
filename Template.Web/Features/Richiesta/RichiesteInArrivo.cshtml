<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Richieste Inviate</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        .table th, .table td {
            vertical-align: middle;
        }
    </style>
</head>
<body>
    <div id="app" class="container mt-5">
        <a href="/" class="text-decoration-none">
            <i class="bi bi-house-door"></i> Torna alla Home
        </a>
        <h1 class="text-left my-4">Richieste Inviate</h1>

        <div v-if="richieste.length" class="table-responsive p-3 rounded">
            <table class="table table-bordered table-striped align-middle">
                <thead class="bg-white text-center">
                    <tr>
                        <th>Utente</th>
                        <th>Tipologia</th>
                        <th>Data Inizio</th>
                        <th>Data Fine</th>
                        <th>Ora Inizio</th>
                        <th>Ora Fine</th>
                        <th>Durata</th>
                        <th>Stato</th>
                        <th v-if="(isCEO || (isManager && richieste.some(r => r.role !== 'Manager' && r.userName !== currentUserName && r.stato === 'Da Approvare'))) && hasPendingRequests">Azioni</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(richiesta, index) in richieste" :key="richiesta.id" :class="index % 2 === 0 ? 'bg-light' : ''">
                        <td class="text-center fw-bold">{{ richiesta.userName }}</td>
                        <td>{{ richiesta.tipologia }}</td>
                        <td class="text-center">{{ formatDate(richiesta.dataInizio) }}</td>
                        <td class="text-center">{{ formatDate(richiesta.dataFine) }}</td>
                        <td class="text-center">{{ formatOra(richiesta.oraInizio) }}</td>
                        <td class="text-center">{{ formatOra(richiesta.oraFine) }}</td>
                        <td class="text-center">
                            {{ formatDurata(richiesta.durata, richiesta.tipologia) }}
                        </td>
                        <td class="text-center">
                            <span class="badge" :class="getBadgeClass(richiesta.stato)">
                                {{ richiesta.stato }}
                            </span>
                        </td>
                        <td v-if="(isCEO || (isManager && richiesta.role !== 'Manager' && richiesta.userName !== currentUserName)) && richiesta.stato === 'Da Approvare'" class="text-center">
                            <button class="btn btn-success btn-sm me-1" v-on:click="apriModal(richiesta.id, 'approvare')">
                                Accetta
                            </button>
                            <button class="btn btn-danger btn-sm" v-on:click="apriModal(richiesta.id, 'rifiutare')">
                                Rifiuta
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div v-else class="alert alert-warning text-center shadow-sm mt-4" role="alert">
            <strong>Non ci sono richieste salvate.</strong>
        </div>

        <!-- Action confirmation -->
        <div class="modal fade" id="confermaModal" tabindex="-1" aria-labelledby="confermaModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confermaModalLabel">Conferma Azione</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Sei sicuro di voler <strong>{{ azioneSelezionata === 'approvare' ? 'approvare' : 'rifiutare' }}</strong> questa richiesta?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                        <button type="button" class="btn btn-primary" v-on:click="eseguiAzione">Conferma</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Success -->
        <div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="successModalLabel">Operazione Riuscita</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        {{ messaggioConferma }}
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        new Vue({
            el: '#app',
            data: {
                richieste: @Html.Raw(Json.Serialize(Model)),
                isManager: @User.IsInRole("Manager").ToString().ToLower(),
                isCEO: @User.IsInRole("CEO").ToString().ToLower(),
                currentUserName: '@User.Identity.Name',
                richiestaIdSelezionata: null,
                azioneSelezionata: '',
                messaggioConferma: ''
            },
            computed: {
                hasPendingRequests() {
                    return this.richieste.some(richiesta => richiesta.stato === 'Da Approvare');
                }
            },
            methods: {
                formatDate(date) {
                    return new Date(date).toLocaleDateString('it-IT');
                },
                formatOra(ora) {
                    if (ora === "00:00:00" || !ora) {
                      return "";
                    }
                    const [ore, minuti] = ora.split(":"); 
                    return `${parseInt(ore, 10)}:${minuti}`; 
                },
                formatDurata(durata, tipologia) {
                  if (tipologia === 'Permessi') {
                    const [ore, minuti] = durata.split(':').map(Number);
                    if (minuti === 0) {
                      return `${ore} h`; 
                    } else {
                      return `${ore}:${minuti} h`; 
                    }
                  } else if (tipologia === 'Ferie') {
                    const giorni = parseInt(durata, 10);
                    return `${giorni} gg`; 
                  }
                  return durata; 
                },

                getBadgeClass(stato) {
                    switch (stato) {
                        case 'Accettata': return 'bg-success';
                        case 'Rifiutata': return 'bg-danger';
                        default: return 'bg-primary';
                    }
                },
                apriModal(id, azione) {
                    this.richiestaIdSelezionata = id;
                    this.azioneSelezionata = azione === 'approvare' ? 'approvare' : 'rifiutare';
                    const modal = new bootstrap.Modal(document.getElementById('confermaModal'));
                    modal.show();
                },
                eseguiAzione() {
                    const id = this.richiestaIdSelezionata;
                    const azione = this.azioneSelezionata === 'approvare' ? 'Approva' : 'Rifiuta';

                    fetch(`/Richiesta/${azione}?id=${id}`, {
                        method: 'POST'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.aggiornaRichieste();

                            // Show success message
                            this.messaggioConferma = `Richiesta ${this.azioneSelezionata} con successo.`;
                            const successModal = new bootstrap.Modal(document.getElementById('successModal'));
                            successModal.show();
                        } else {
                            alert('Errore durante l\'operazione: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Errore durante l\'operazione:', error);
                        alert('Errore durante l\'operazione. Per favore, riprova.');
                    });

                    // Close the action confirmation panel
                    const modal = bootstrap.Modal.getInstance(document.getElementById('confermaModal'));
                    modal.hide();
                },
                aggiornaRichieste() {
                    fetch('/Richiesta/AggiornaLista')
                        .then(response => response.json())
                        .then(data => {
                            this.richieste = data;
                        })
                        .catch(error => {
                            console.error('Errore durante il recupero delle richieste:', error);
                        });
                }
            }
        });
    </script>
</body>
</html>
