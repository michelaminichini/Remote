@model Template.Web.Features.Home.HomeViewModel

@{
    ViewData["Title"] = "Remote";
    var successMessage = TempData["Message"] as string;
    var errorMessage = TempData["ErrorMessage"] as string;
}

<div class="container">
    <head>
        <link rel="stylesheet" href="/css/HomeStyle.css" />
    </head>

    <!-- Contenuto principale della pagina -->
    <div class="title-container">
        <h1 class="title-text">@ViewData["Title"]</h1>

        <div class="profile-container">
            <img src="~/@Model.UserProfileImage" alt="Profilo" class="profile-img-large" />
            <div class="logout-button-container">
                <h4 class="user-name">@Model.UserEmail</h4>
                <form method="post" action="@Url.Action("Logout", "Login")">
                    <button class="btn btn-danger" type="submit">Logout</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Messaggio di successo o errore -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }

    <!-- Tab -->
    <div class="tabs">
        <button class="btn btn-primary" onclick="location.href='@Url.Action("Team", "Team")'">Team</button>
        <button class="btn btn-primary" onclick="location.href='@Url.Action("Richiesta", "Richiesta")'">Richieste</button>
        <button class="btn btn-primary" onclick="location.href='@Url.Action("History", "History")'">Storico</button>
    </div>

    <!-- Filtro per data -->
    <form method="get" action="@Url.Action("Home", "Home")">
        <div class="date-selectors mb-4">
            <label for="dateFrom">Dal:</label>
            <input type="date" id="dateFrom" name="dateFrom" value="@Model.DateFrom?.ToString("yyyy-MM-dd")" class="form-control" />
            <label for="dateTo" class="ms-3">Al:</label>
            <input type="date" id="dateTo" name="dateTo" value="@Model.DateTo?.ToString("yyyy-MM-dd")" class="form-control" />
            <button type="submit" class="btn btn-primary">Filtra</button>
        </div>
    </form>

    <!-- Calendario -->
    <div class="calendar text-center mt-4">
        <div class="month-navigation">
            <h2 class="month-title">
                <button class="nav-button left-arrow" onclick="location.href='@Url.Action("Home", new { year = Model.CurrentYear, month = Model.CurrentMonth - 1, dateFrom = Model.DateFrom?.ToString("yyyy-MM-dd"), dateTo = Model.DateTo?.ToString("yyyy-MM-dd") })'">&lt;</button>
                @Model.CurrentMonthName @Model.CurrentYear
                <button class="nav-button right-arrow" onclick="location.href='@Url.Action("Home", new { year = Model.CurrentYear, month = Model.CurrentMonth + 1, dateFrom = Model.DateFrom?.ToString("yyyy-MM-dd"), dateTo = Model.DateTo?.ToString("yyyy-MM-dd") })'">&gt;</button>
            </h2>
        </div>

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Lunedì</th>
                    <th>Martedì</th>
                    <th>Mercoledì</th>
                    <th>Giovedì</th>
                    <th>Venerdì</th>
                    <th>Sabato</th>
                    <th>Domenica</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var week in Model.Weeks)
                {
                    <tr>
                        @foreach (var day in week)
                        {
                            <td class="@(day.IsToday ? "today" : "") @(day.IsCurrentMonth ? "" : "other-month-day") @(day.IsInRange ? "" : "other-month-day")">
                                <div class="day-header d-flex justify-content-between align-items-start">
                                    <span>@day.Date.Day</span>

                                    <!-- Condizione per mostrare il pulsante solo se non è sabato o domenica -->
                                    @if (day.Date.DayOfWeek != DayOfWeek.Saturday && day.Date.DayOfWeek != DayOfWeek.Sunday)
                                    {
                                        <button class="btn btn-sm add-event-button" onclick="toggleEventMenu(this, '@day.Date.ToString("yyyy-MM-dd")')">
                                            +
                                        </button>
                                    }
                                </div>
                                <div class="event-menu" id="event-menu-@day.Date.ToString("yyyy-MM-dd")" style="display: none;">
                                    <form method="post" action="@Url.Action("AddEvent", "Home")">
                                        <input type="hidden" name="selectedDate" value="@day.Date.ToString("yyyy-MM-dd")" />

                                        <!-- Dropdown per selezionare il tipo di evento -->
                                        <select name="eventType" id="eventType-@day.Date.ToString("yyyy-MM-dd")" class="form-select" onchange="showEventFields(this, '@day.Date.ToString("yyyy-MM-dd")')">
                                            <option value="Smartworking">Smartworking</option>
                                            <option value="Presenza">Presenza</option>
                                            <option value="Trasferta">Trasferta</option>
                                            <option value="Ferie">Ferie</option>
                                            <option value="Permessi">Permessi</option>
                                        </select>

                                        <!-- Sezione per gli orari (Visibile solo per Trasferta e Permessi) -->
                                        <div id="timeFields-@day.Date.ToString("yyyy-MM-dd")" style="display: none;">
                                            <label for="orarioInizio-@day.Date.ToString("yyyy-MM-dd")">Orario Inizio:</label>
                                            <input type="time" name="startTime" id="orarioInizio-@day.Date.ToString("yyyy-MM-dd")" class="form-control">
                                            <label for="orarioFine-@day.Date.ToString("yyyy-MM-dd")">Orario Fine:</label>
                                            <input type="time" name="endTime" id="orarioFine-@day.Date.ToString("yyyy-MM-dd")" class="form-control">
                                        </div>

                                        <!-- Bottone per inviare il form -->
                                        <button type="submit" class="btn btn-sm btn-primary mt-2">Aggiungi</button>
                                    </form>
                                </div>
                                <div class="events mt-2">
                                    @foreach (var eventItem in day.Events.GroupBy(e => e.Icon))
                                    {
                                        var eventIcon = Url.Content(eventItem.Key); // Usa Url.Content per garantire percorsi corretti
                                        var userName = string.Join(", ", eventItem.Select(e => e.UserName).Distinct());
                                        <div class="events">
                                            <!-- Mostra l'icona dell'evento -->
                                            <img src="@eventIcon" alt="Event Icon" class="event-icon" title="Eventi di: @userName" />
                                        </div>
                                    }
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>

<script>
    function toggleEventMenu(button, date) {
        const eventMenu = document.getElementById('event-menu-' + date);
        if (eventMenu) {
            eventMenu.style.display = eventMenu.style.display === 'none' ? 'block' : 'none';
        }
    }

    // Funzione per mostrare i campi orari quando viene selezionato Trasferta o Permessi
    function showEventFields(select, date) {
        var selectedEventType = select.value;
        var timeFields = document.getElementById('timeFields-' + date);

        // Mostra o nascondi i campi per orario in base al tipo di evento
        if (selectedEventType === 'Trasferta' || selectedEventType === 'Permessi') {
            timeFields.style.display = 'block'; // Mostra i campi orario
        } else {
            timeFields.style.display = 'none';
        }
    }
</script>
